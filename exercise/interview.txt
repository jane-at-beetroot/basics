1. Чи правильне твердження, що Python - нетипізована мова програмування? Наведіть приклад коду, 
який підтвердить або спростує це твердження.

2. Яка різниця між мутебальними та імутабельними типами даних у Python? Наведіть короткий приклад коду,
який ілюструє цю різницю

3. У чому полягає принцип "duck typing"? Наведіть приклад застосування цього принципу

4. Які типи даних можуть бути ключами у dict?

5. У чому полягає різниця між set та frozen set?

6. Перерахуйте основні принципи ООП.

7. Наведіть приклад коду, який демонструє принцип спадкування

8. Створіть декоратор, який заміряє час виконання задекорованої функції. Декоратор не обмежує кількість та порядок аргументів, що передаються функції. Декоратор має у циклі викликати задекоровану функцію 1000 разів, а після того виводити рядок з назвою функції, її аргументами, часом виконання 1000 викликів. Декоратор має повертати результат останнього, тисячного, виклику функції.

9. Реалізувати функцію eucledian_gcd(a: int, b: int) -> int, яка обраховуватиме найбільший спільний дільник для агрументів a та b за алгоритмом Евкліда. 

Алгоритм Евкліда для пошуку НСД:
    1) Допоки a != b:
        - якщо a > b, то a = a - b
        - якщо b > a, то b = b - a
    2) Коли a == b, повертаємо а, яке і буде найбільшим спільним дільником.

10. З модулю math імпортувати функцію gcd, яка обраховує набільший спільний дільник.

11. Задекорувати функції з завдань 9 та 10 декоратором з завдання 8.

12. Викликати кожну задекоровану функцію з завдання 11 з аргументами:
    1) a = 30, b = 6
    2) a = 100, b = 1
    3) a = 999, b = 9
    4) a = 4, b = 1024

    Навести результат виконання задекорованих функцій, зробити висновок про швидкість роботи кожної з задекорованих функцій.